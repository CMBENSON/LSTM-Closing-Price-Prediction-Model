# -*- coding: utf-8 -*-
"""ClosingPricePredictionLSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P9fEGnSVr9Eahybs4pXZnbVS7ragcfsK
"""

# This program using an artificial recurrent neural network called Long Short Term Memory (LSTM)
# to predict the closing stock price of a corporation using the past 60 days stock price.

!pip install --upgrade pandas
!pip install --upgrade pandas-datareader
#IMPORTS
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

print('Please Enter Stock Code Below (AAPL, TSLA, LLOY.L etc.)')
stock = input("Enter Stock Code: ")

#GET STOCK QUOTE
df = web.DataReader(stock, data_source='yahoo', start='2012-01-01', end='2021-12-29')
#Show Data
df

#GET ROWS AND COLUMNS IN DATA
df.shape

#VISUALIZE DATA - CLOSING PRICE HISTORY 
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.show()

#CREATE NEW DATAFRAME WITH ONLY CLOSING DATA
data = df.filter(['Close'])
#CONVERT DATAFRAM TO ARRAY
dataset = data.values
#COMPUTE ROWS TO TRAIN LSTM
training_data_len = math.ceil(len(dataset) * 0.8)

print('Length of training data = ' + str(training_data_len))

#SCALE THE DATA
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

print("Scaled Data:")
scaled_data

#CREATE TRAINING DATASET
#CREATE SCALED TRAINING DATASET
train_data = scaled_data[0:training_data_len, :]
#SPLIT INTO X_TRAIN AND Y_TRAIN
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i - 60: i, 0])
  y_train.append(train_data[i, 0])
  if i <= 60:
    print(x_train)
    print(y_train)
    print()

#CONVERT X_TRAIN AND Y_TRAIN TO NUMPY ARRAY
x_train, y_train = np.array(x_train), np.array(y_train)

#RESHAPE DATA FOR LSTM 3D SAMPLES
x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))
x_train.shape

#BUILD LSTM MODEL

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#MODEL SUMMARY
model.summary()

#COMPILE MODEL
model.compile(optimizer='adam', loss='mean_squared_error')

#TRAINING
model.fit(x_train, y_train, batch_size=1, epochs=1)

#CREATE TESTING DATASET
#CREATE A NEW ARRAY CONTAINING SCALED VALUES
test_data = scaled_data[training_data_len - 60: , :]
#CREATE DATASETS X AND Y TEST
X_test = []
Y_test = dataset[training_data_len:, :]

for i in range(60, len(test_data)):
  X_test.append(test_data[i - 60: i, 0])

#CONVERT TEST DATA TO NUMPY ARRAY
X_test = np.array(X_test)

#RESHAPE TEST DATA
X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))
print('Test Data Shape: ')
X_test.shape

#GET PREDICTED PRICE VALUES
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

#EVALUATE MODEL WITH ROOT MEAN SQUARED ERROR (RMSE)
rmse = np.sqrt(np.mean(predictions - Y_test)**2 )
print('RMSE value of 0 means the predictions were perfect.')
print('Our RSME Value: ' + str(rmse))

#PLOT DATA
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

#VISUALIZE DATA
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USE ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

#SHOW VALIDATION AND PREDICTED PRICES
valid

#GET QUOTE
apple_quote = web.DataReader(stock, data_source='yahoo', start='2012-01-01', end='2021-12-28')
#NEW DF
new_df = apple_quote.filter(['Close'])
#GET LAST 60 VALUSE AND CONVERT DF TO ARRAY
last_60_days = new_df[-60:].values
#SCALE DATA
last_60_days_scaled = scaler.transform(last_60_days)
#CREATE EMPTY LIST
x_test = []
#APPEND PAST 60 DAYS
x_test.append(last_60_days_scaled) 
#CONVERT XTEST TO NUMPY ARRAY
x_test = np.array(x_test)
#RESHAPE
x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))
#GET PREDICTED SCALED PRICE 
pred_price = model.predict(x_test)
#UNDO SCALING
pred_price = scaler.inverse_transform(pred_price)

apple_quote_2 = web.DataReader(stock, data_source='yahoo', start='2021-12-29', end='2021-12-29')

print('Predicted Price for the 29th December 2021: ' + str(pred_price))
print('Actual Price for the 29th of December 2021: ' + str(apple_quote_2['Close']))